import {
  Pdf,
  Question,
  Option,
  Diagram,

} from "../models/everytestmode.refrence.js";
import levenshtein from "fast-levenshtein";
import jwt from "jsonwebtoken";
import MeTest from '../models/saved.js';
import config from "config";

const fetchQuestions = async (req, res) => {
  try {
    const { selectedSubjects, selectedChapters, numQuestions } = req.body;
    const distribution = {};
    const subjectChapterPairs = [];

    for (const subject of selectedSubjects) {
      const chapters = selectedChapters[subject];
      for (const chapter of chapters) {
        const chapterName = chapter.name.toLowerCase().trim();
        subjectChapterPairs.push({ subject, chapter: chapterName });
      }
    }

    const allPdfs = await Pdf.findAll({
      attributes: ["id", "subject", "topic_tags"],
    });

    const pdfMap = {};
    for (const pdf of allPdfs) {
      const dbChapter = pdf.topic_tags.toLowerCase().trim();
      const key = `${pdf.subject.toLowerCase()}||${dbChapter}`;
      if (!pdfMap[key]) pdfMap[key] = [];
      pdfMap[key].push(pdf.id);
    }

    const findClosestMatch = (subject, chapter) => {
      let closestMatch = null;
      let closestDistance = Infinity;
      for (const pdf of allPdfs) {
        if (pdf.subject.toLowerCase() !== subject.toLowerCase()) continue;
        const dbChapter = pdf.topic_tags.toLowerCase().trim();
        const distance = levenshtein.get(chapter, dbChapter);
        if (distance < closestDistance) {
          closestDistance = distance;
          closestMatch = dbChapter;
        }
      }
      return closestMatch;
    };

    for (const { subject, chapter } of subjectChapterPairs) {
      const closestMatch = findClosestMatch(subject, chapter);
      const key = `${subject.toLowerCase()}||${closestMatch || chapter}`;
      const pdf_ids = pdfMap[key] || [];

      if (!distribution[subject]) distribution[subject] = {};

      distribution[subject][chapter] = { pdf_id: pdf_ids };
    }

    const questionsWithOptions = [];

    for (const [subject, chapters] of Object.entries(distribution)) {
      for (const [chapter, details] of Object.entries(chapters)) {
        const { pdf_id } = details;

        if (pdf_id.length === 0) continue;

        const randomPdfId = pdf_id[Math.floor(Math.random() * pdf_id.length)];

        const fetchedQuestions = await Question.findAll({
          where: { pdf_id: randomPdfId },
          include: [
            { model: Option, as: "options" },
            { model: Diagram, required: false },
          ],
        });

        const shuffled = fetchedQuestions.sort(() => 0.5 - Math.random());
        const selectedQuestions = shuffled.slice(0, numQuestions);

        for (let question of selectedQuestions) {
          // Fetch options and find correct one
          const options = question.options.map((opt) => opt.dataValues);
          const correctOption = options.find(opt => opt.is_correct);
          console.log(correctOption);

          const diagramPath =
            question.Diagrams?.length > 0
              ? question.Diagrams[0].dataValues.diagram_path
              : null;

          questionsWithOptions.push({
            question: {
              ...question.dataValues,
              subject,
              chapter,
            },
            options,
            correctAnswer: correctOption, // Include the correct option
            diagram: diagramPath,
          });
        }
      }
    }

    if (questionsWithOptions.length === 0) {
      return res.status(404).json({
        error: "No questions found based on the selected subjects and chapters.",
      });
    }

    res.status(200).json({ questions: questionsWithOptions });
  } catch (error) {
    console.error("Error fetching questions:", error.message, error.stack);
    res.status(500).json({ error: "Internal Server Error" });
  }
};


const submitTest = async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    if (!authHeader)
      return res.status(401).json({ error: "Unauthorized: No token provided" });

    const token = authHeader.split(" ")[1];
    if (!token)
      return res
        .status(401)
        .json({ error: "Unauthorized: Invalid token format" });

    const secret = config.get("jwtSecret");
    let studentId;
    try {
      const decoded = jwt.verify(token, secret);
      studentId = decoded.id;
    } catch (err) {
      return res
        .status(403)
        .json({ error: "Unauthorized: Invalid or expired token" });
    }

    const {
      answers = {},
      selectedChapters = {},
      totalQuestions = 0,
      subjectWiseMarks = {},
      testName = "Untitled Test",
      difficultyLevel = "Medium",
      pdf_id = null,
    } = req.body;

    let correct = 0;
    let incorrect = 0;
    let unattempted = 0;
    let score = 0;
    const finalAnswers = {};

    for (const questionId in answers) {
      const selectedOptionId = answers[questionId];
      const question = await Question.findByPk(questionId, {
        include: [{ model: Option, as: "options" }],
      });

      if (!question) continue;

      const correctOption = question.options.find((opt) => opt.is_correct);

      if (selectedOptionId === null || selectedOptionId === undefined) {
        unattempted++;
        finalAnswers[questionId] = null;
      } else if (selectedOptionId === correctOption.id) {
        correct++;
        score += 4;
        finalAnswers[questionId] = selectedOptionId;
      } else {
        incorrect++;
        score -= 1;
        finalAnswers[questionId] = selectedOptionId;
      }
    }

    const newTest = await MeTest.create({
      studentId,
      testName,
      selectedChapters,
      difficultyLevel,
      status: "completed",
      answers: finalAnswers,
      score,
      correct,
      incorrect,
      unattempted,
      totalQuestions,
      overAllMarks: score,
      subjectWiseMarks,
      pdf_id,
    });

    res.status(201).json({ message: "✅ MeTest submitted successfully!", testId: newTest.id });
  } catch (error) {
    console.error("❌ Error submitting MeTest:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

export { fetchQuestions, submitTest };
